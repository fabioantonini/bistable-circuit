%!PS-Adobe-2.0
%%Creator: dvips(k) 5.90a Copyright 2002 Radical Eye Software
%%Title: imex2.dvi
%%CreationDate: Tue Dec 02 09:39:37 2003
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: CMTT12 CMR12
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: C:\Programmi\texmf\miktex\bin\dvips.exe imex2
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2003.12.02:0939
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type/integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics/Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{
dup sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1
roll mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def
dup[exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}
if}forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}
def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginFont: CMR12
%!PS-AdobeFont-1.1: CMR12 1.0
%%CreationDate: 1991 Aug 20 16:38:05
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
readonly def
/FontBBox{-34 -251 988 750}readonly def
/UniqueID 5000794 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF4E9D2405B169CD5365D6ECED5D768D66D6C
68618B8C482B341F8CA38E9BB9BAFCFAAD9C2F3FD033B62690986ED43D9C9361
3645B82392D5CAE11A7CB49D7E2E82DCD485CBA04C77322EB2E6A79D73DC194E
59C120A2DABB9BF72E2CF256DD6EB54EECBA588101ABD933B57CE8A3A0D16B28
51D7494F73096DF53BDC66BBF896B587DF9643317D5F610CD9088F9849126F23
DDE030F7B277DD99055C8B119CAE9C99158AC4E150CDFC2C66ED92EBB4CC092A
AA078CE16247A1335AD332DAA950D20395A7384C33FF72EAA31A5B89766E635F
45C4C068AD7EE867398F0381B07CB94D29FF097D59FF9961D195A948E3D87C31
821E9295A56D21875B41988F7A16A1587050C3C71B4E4355BB37F255D6B237CE
96F25467F70FA19E0F85785FF49068949CCC79F2F8AE57D5F79BB9C5CF5EED5D
9857B9967D9B96CDCF73D5D65FF75AFABB66734018BAE264597220C89FD17379
26764A9302D078B4EB0E29178C878FD61007EEA2DDB119AE88C57ECFEF4B71E4
140A34951DDC3568A84CC92371A789021A103A1A347050FDA6ECF7903F67D213
1D0C7C474A9053866E9C88E65E6932BA87A73686EAB0019389F84D159809C498
1E7A30ED942EB211B00DBFF5BCC720F4E276C3339B31B6EABBB078430E6A09BB
377D3061A20B1EB98796B8607EECBC699445EAA866C38E02DF59F5EDD378303A
0733B90E7835C0AAF32BA04F1566D8161EA89CD4D14DDB953F8B910BFC8A7F03
5020F55EF8FC2640ADADA156F6CF8F2EB6610F7EE8874A26CBE7CD154469B9F4
ED76886B3FB679FFDEB59BB6C55AF7087BA48B75EE2FB374B19BCC421A963E15
FE05ECAAF9EECDF4B2715010A320102E6F8CCAA342FA11532671CCCC52875960
84CC1832A068F03077BAA0C4DE33C949791A4CEEE74C93E7590B8AE2D373B61B
2788BE4611BE2D9B0A0BAEB388AE179AC3A42C59304DEC12CA3F75B0FEBF535C
E1BF25FAAE5A4DDB1716487BED1FDE77F5D68DDA54D5E881C926B52BFFE11AAF
3709C5A32E51AF57C3D9DF553E0BF16FAD023F6124FB21200C5208DBF9F20140
A391F4D49CEF65730E6ACB3CBF11993D449B775E1A396B966E1EBE53A87BF161
3A792429EC77181F5405FBDB9A96A6546E52CBA6E9F02A9475DD5D28DC0F59BB
C41A91B9987AEE4965E921DF51A1453BC75C24C28FF5E411072441E12BF8D1CF
63BD125208DDE9ABABAC9CC1126444AC5DF0F2B4279A34409349FBBEB15E28B4
7E9E1E0B15D0702A29D6E624E397890D39249E235EE2304E44A3F9CF2B7105E3
B72E256E5C377B724680486162AA64B7C0F8C6B348EED54EB0462FC5C8B4B8B0
722AB9961A40A27F546F31F576F46E292A8D17976840A4D82B332D1E5F61E819
378FE803171EC3668D8E2035CEFB45760DF73D62C4B8A57B906474733FF017FB
E9808C673D93C3B6744DADB78E3841DD501A015F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTT12
%!PS-AdobeFont-1.1: CMTT12 1.0
%%CreationDate: 1991 Aug 20 16:45:46
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 92 /backslash put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 122 /z put
dup 123 /braceleft put
dup 125 /braceright put
readonly def
/FontBBox{-1 -234 524 695}readonly def
/UniqueID 5000833 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660FE13FF01BC20148F9C480BCD0E
C81D5BFC66F04993DD73F0BE0AB13F53B1BA79FE5F618A4F672B16C06BE3251E
3BCB599BFA0E6041FBD558475370D693A959259A2699BA6E97CF40435B8E8A4B
426343E145DF14E59028D4E0941AB537E34024E6CDE0EA9AF8038A3260A0358D
D5B1DB53582F0DAB7ADE29CF8DBA0992D5A94672DFF91573F38D9BFD1A57E161
E52DA1B41433C82261E47F79997DF603935D2A187A95F7A25D148FB3C2B6AA32
6B982C32C6B25867871ED7B38E150031A3DE568C8D3731A779EAAF09AC5CE6C5
A129C4147E56882B8068DF37C97C761694F1316AF93E33FF7E0B2F1F252735CE
0D9F7BCE136B06EE967ABE0C8DF24DCBBF99874702ED252B677F407CB39678CC
85DDFC2F45C552BA967E4158165ED16FECC4E32AC4D3B3EB8046DCDD37C92FDF
F1F3710BB8EF5CA358ABACA33C7E5ACAD6BF5DC58BDFC3CF09BA2A38291D45A4
C15FF1916FE2EC47FDC80911EB9C61F5D355BEDFC9DB17588547763AC5F0B1CC
12D2FFB32E0803D37E3281DA9CE36C5433655526ACFB3A301C56FAB09DF07B5D
048B47687348DEB96F3F9C53CE56DDD312B93D3918CD92AF53FB9461864D11B8
0138918D0B1270C54873C4012CDE6F886DB11BCEA04B023EBB43E0D0A06BE725
741D08B9DB688731A6C9886C15A83C28DADCC81385EA239E045E8F3670CE03DB
9EE77ED067036595C9F3B1854343BE3A12E486B6E5A2F8AC44FA5378D28DCCEE
306B0E283AA444423F9A4FF38E2B56DCF67A39CEB2C643DAE86865517D5D0371
CB8797208ADEC637330A3A57902C9A88EDB75A7C16FA9850075D9F19578EC666
1353CC1FC512D59DFF847ACCD17671C7B980499729E5647560D9FFE78F5A7227
7CFD6A326E64844F86A04F061F69545536B5621F29E56AA34B80FB19260B2FE2
2F8C9640D534484CB28DD2766C9ADAD10CF7C5B2EEB812C0F5E53B1E3B2CCFD9
2B5866688FC2804F4AA72D3EE5C6F7FE5A555820933069BE191150CA4F071463
F07949D662E005C2AF51A40053EDC81960E34103C86F2228A2079EB49FA07066
30ADE9B78252DD576F8730F542D1C8B2E987109B6C8954D05BBCBE08A945217F
A0FB1AAB7C082FD818EEFAE18FFE1762961272D2191A8AC60B7CF80C795150CB
212FD31A3212A464EF755D2FB95B2A36575F7E897E0939089A784595F718D251
3D084318DC3B0E32C02B9D6207424EAE2CBBBDEB64A230B76B46C03D87A1C83A
BAFAD0C3469863774834A723E4BD027F301710C3D598FC838ED48E10A4B78EA0
45914AE54E10A20B0F5C06A087D7924E42100B60F51E9A034808E4AC04927CEB
A71041E22DC94A96B23E8D7D5EAF40CE2228100AFEDCFC987A5CFEC00004BB9A
044D001FBD8F0834DB14B52D7D2CBDBA80D3B8BF2067B5AEF3CA8A95905E0A77
9475ADAF34E59190DB2A0E172CC2E205F04057CB8FDDCE69AA57E7A75570AF2D
E84A5CA5252AA515A3BB06F05C52A5E2B129496AA4270DCF362BB677ECD31726
42BAB83C97276C56348323567AF9DC879D842F9EF2C34E67147BE55CA255F2C0
96E5C8D74747A4C60FE8BCEC119913D5CA6214D9589FB76C7526FBB9A8255D92
AB0734B9BFFF133DA8C8F6014D7FA838A95D23E5AB87EA1347D7118BA1439B44
CBBA20FF286D55A84B35E277EA52F21C63A1E8BDBA8C55C4D7A8FA286762B42C
5ADAD94967175DEDC18BAC4A74712E91228F048D4E156D948A0DEC2297F3A2DC
D2F09C733AF4C0F59487BFF50A458C32BA2209FBE02E1BAFDD1504CED18F6DAD
8C312BC5C87ED7219ADE8D514C80DA3B2CB389ADB44A9B884C54E4F12DCEE9AB
6DF81D19A3D315DE4DC81B97DFA61F410100034612FBD8420AAB8215F6F951AB
FAC20BF75D5907C23D59A3189126E85E704C6B0B327F8AECA6CA530B1A0A5C22
F3DC8DDBF9A75896DED6D2B62FC67F3E70C042610D9270F596D39EDF082A4B11
22F0BCDC9AE7D3F7850D93D67E43AED8FCE6534AA55A2C1C13A6016C8F796895
D0BA4405B863581AA4E39844233DE2F1C26B7833065C73F9BDB351C063D4D1BC
A8D3733BD1207FE507CE0287874E4362B7C774964AA5A043896A1C780E7D39F4
E0678CC821C86F09115CED950F472BAB31DDFBFF1C8D7B5882BC27D5D3D5D6B2
F646831DA9DE6B191387CD8ACC43D48CC3BD98F001CC25A3F4EA0EAC0B23FF6E
06D467BA4ABE8B61A70B26A95B0952928B3271DA7B7F6DF1D3CAEAD71366EB2A
60C02B2688DA9FA77A1E869ACF0460B63E1CEF34D607B8F8BF86791FA6A697EE
0DAF6724AA2819CFDDF1992CC20351B035ABEED95F8B75B0C88611DB6E2197AA
0BEB134DAFEA193BB2446FDE40FEFE7CA63AF3C91EE4BFB7C1A26CDE44B0E11B
D953BC4F65CB0E82DB86CFB0A1367298E9C080514A6D6229AB170738347605C5
98ACD4BF6C0885AF39F026EB477D8E939116171FFBB4A8B4308D1F39DB3F5139
EFAC25F502ADAA428F7C40F93F50AF6A0B86842C08065FBB89BFD5CF07A8CC8D
B251FD5E45CF82A22C17DAB69AC63E9052A79054B528DB0C5614EEAAF4D244F9
04A6672CF0EE27BBB86B03E4E86FCF81CEDBEA42F7A387ED4E18F47CD85CF780
47CD6DEF912286604C730E33EC6C79F1DFADA935DC205371ED1F891BA4832AB8
5365065E46D41D5B43A4193320B5DD73CA1B5F2AF9B75FD0F5AA6B5ED8B4E1A0
BF82B33CC8DBBC940241266DFCE29FD51EAB19CB421D36C8391BAEE889EEBC33
FF299386CEB5106ED05A9E44011FE3CE1EDFB9BF42868C6395713B472D8C1436
7708CD429EF72532BF91F08A1E4D204C1F5820E89D5762ECDB28200BC212C2AB
550B78CDAF3837AEE8E83F904509AF9F2AD7BB3383CF564E729EA399E369CB7B
0E19EDA64645A09930E9024562E5F9D55F893EDBF44568B0FB34081B166CA1C1
B3DE34ED051F916B86567C22B4F092155618132D89E77CC10EFCE882571FDEA0
FD3110D3FE68B75018CE9E44263123B83F99D89202AABE47A5F0FB3DE529E66D
493E0DBC77E4125E84FC984853A75A828FEA6F8C1B306DE616FA7EAC0863A1CA
5B8F473EC1B9E37BD1805947997EF6949DAD2DB3E765D0FB3E78DA8150A952E5
60FB87BB2F24CAF5C336E15F197A198E69FE3DE5C5563BDB66572ED7DEE351F4
BBA1D21BFE933C178C72100CD44EF8BEDF876CE8E40860555F356DACF4B5AEAE
D0AC2670CFB88C515D333AD3714A90DF633814B840CB0A8E8515DE2B46AAEAD9
2D40D521E2B2B3F2CC76A12A4200B714A100D7C7D6FFF6A0051D90612EF1FA3B
7CBA39784ECD702917D3467833C476CD8CBF79107AB23C619B5B2813784A854C
3BDD7BDF9DC121F5A20A446AF0EAA01F0DD9206822D0A1B508B9AD8C71C3EC89
208ABC84BEB91909A2FBADB7E166007E9630AB86E4E2BC0F4CB0B8B45291C65A
502DFE887186C20BF68104DB25EC529F54132B134BA1BA3F49FE469FF5AD14BB
63EEBF57CC5D52007D508A6DAC54A87320C2AA64A9DBECCB572945C84953990F
9E12557D69FC79F8320C40C28805FBC405AD9878A58065F5FF332D9ED5E47C0C
766153EAE82E63758147652F0F189F160E3768F9C4A10A4AF2D1E882A738A042
42DB892F146379F3F8C34ED12010E7AE82E2EC94095722F212C574F10F69B879
D264E440A0E47F95211DB01F8BE4746D90B8790AD30E6DB547051B2DBB9B898E
585281BAAC70F73E0706A02C41327D3FD8F51A094E1548D0801768C35027E14A
614225140A427C7B1E9FF43E6B3D03A22A64EEC9D65B8BBE5350E246DF5D3928
2F12611426413D4CD388BD9612995795F0517C261E572F5D651C4FAF4D040359
04A19606C834F665FAC834E7167A25C5CCA2C7B1457275C6D726FF97593B4C51
94BC3B6D0DCA0D8601A1BBEEE983703F6DDC9F94B27CDA91950B094ED0B500ED
00D776954348E92FE3DCB1DD6AE227BC65706628A3A68133783E26ED302833BF
A452BCC2A9BC5C012A79A7A8962FEE2A7C8AEDC1E6C024488A3A2FBEC656266B
1270589FCA9A196986FA5C042C39F272DB060784D95D2DDD37B720299054D432
5098A4F90F160C262964A622F137D3DD726F293A1B49C9C0D63D86108A5F251D
4B7D6F1488D3101FB10E82229D117FEA433B52B89AF53CFDCD5F6824BC96282E
74BD0304CDEA655860CD353A06BC529ACA3D3AA9C65424EAF35FAD5D55BB178E
985CE6C38805C7D97148675947ED4B07E00B29884288DA4077A1C82592E31C88
C54D49AFC5EEE35E36D0B33CE7EC998EB1CE4E1654278ABA12F9790EF861824D
88255844C250DA43AF5770F2C3EE989991623AF0CECC95BB60561CE70F721B2F
A69BD67D69D5D69096FD1F83BD7C7FD02D3E4C8351018962D9688C9CA3DFD400
2CCB031B07743066DC5398B7977E1438823CCF1CC95E81D6FFE54477CBC5DD55
95E0ADF578FD382D928C7F8DFB16E94F67791419C906DB14FB5E2EC02395530F
5CF2B0318C3EE64174F6FA6DF06787D28A689862A0315EF5F3E803B5531D8D54
08C14BCD7890833860B32312B517D7A08A7AC60E43C2D25F764B73173E5F040F
F0F4CAF56B460AC610196EEC1D0DD6936397FE87102017E74ECEEF8F699C304D
75516089B0A745C3B5E595CF63524BFF2B14C84C3B9466530297CE991A94062D
E8375C2B9DA0647F7100E1F42EDCA783C5BE16F4CBAE195640302E86379D7F20
BA802E3DB8356AD0FC32913E9F08568753B2EDCD8FD413E2922C0CDD15F335DD
EC2842053A4779BA0D986214508391A61A3555B24FEBC62543E957A72F0C4638
4FFB3A41B1D39080353BD8258648691955E3964129A56C7BDC442406F6A741D1
AC538501F5591AC02AF0FC3BAB62F8B05CCB03F6B4CA4F8DA6F256E6B255FEC8
B59A99DBC169F88F21230D3E987922A7E67978F82015F2C43A787BCE92269B76
50A1639326029F9DE7D212D31F8CE6D9E457C0EB0C4FD3C6F24E59DE9DB36314
3E14521E33C0BE9ABC525232498A1B304FA24DACA1B2B89CC30F01EC4BC70117
70DFF195161E4EDFAE2B5C6D6AACE9978032711DA43F8B7025A6A1F1602705B8
6430D2FDF6CD7413CFBCC452073625CBE69DEF36339611F25435BAA4E353E0FF
85E17D146FAF7E65BBDEF1C2CA17BAB81B06DC1B6E7F9368C2B0716823E401F1
FCDB08A565AC04E6915A1D4C441AFAADD804CA548055C33FCFF1315EF8727DCF
A31820EB56B5BC3F7E7C26148ADD6D0D43DAD6E8853EE7289485DA7E0B4939B3
AB58563A34756A9EF142A199909088220459FA9E6AD60C7145A2E1E7B9FA1595
A5486374005D7D907791AE39315409A0343ACCD3D523FE716AC185CA9FD9F4A0
8DFF127FC73AF01C6E1261596BEEEB2F746FAD8F8A5204134EC931DEF43945B1
1EAB216632C95CC72F1BFF4FFDDE73184DA681EBB55BA09425E5C3E32C65263E
02EE0366EF562C990CF7ABE7CD25A65472EC4AB9952171D9CC3730D5CA14FA83
90AF4BEDB17A7B667CAF31F7D37F54D045307E06D2EDA869A7D391A772C0D139
A21B0EBE890A6D52283BDD7CD843C73DC5E987097242406E17ABC8D4A174C5B9
CA1E3BF3809377313B8EE60A245DD98C0C69FDEAF521A2FC1ED6047F87DE9D81
A884FCB10E000A225126816265523862454B28CACA98CCB6F1E1ACA96E0E5879
869D4276A64698063693A150561E18B466FDF9AB06601C6FA758A6F71D7CCCD0
1B85275A7DA9D96F2D93465DBB8C0CE57CB00AD6DAA3081B468D18A0F951952E
1B49E2D769470599FD616CB2939E79FC088616C2669EC81F62A8488D5E3CC4D6
3568FC596E9AEA183BC87676C49D83DC8A62D6EB5D047933A98FC80842598234
B9FEF9325A54F45C7F359FC5FAF55124CD5AFCD2410424BE01C89888314422F7
FE708CCA1551A4001EBB67204D660316A0B15C6E05B1F0D2518CE90D06C79A3F
7F7E05165184ABA1274984FC414D36ADB106357134885B5A7B4C9201B92ECCE1
E69EB86EE1FE3D0AB4597FD51649A4F478C4C4E188B0545E9CC1429EAA5F9D28
9F3F5E9DC6265DB7761513F3B0D0B0B3E7B1A01470F8E2D687D250C85DA2FA1D
6E731E7BE953CECBB39DA65AFD805C4C1F4971B9E82779D38228FE82B35088A9
3BC29BDA57524C04EB4250D9D0FA40DF2D8598EB390D53D84E06404F26C049F8
91E46DE81195211B9B55BCD5A92FF6499243F74718514927B7778CDDD68CB660
14590A13AAE1851236EA5E974286E20A38F1E48A7DEF54454B8A13E454A1B75A
D32669749136211A6A71D2E37981FE10009269DE2EE825ECAC1806CC9CB03A43
115C9A8F77772DE0F49423A4CC00E98C6897C9BAD610CFFA0E76DB4441327DF6
7E5F4519E77C879F20FF1B5E42725A6031B8EC06F8B88E418D192551EFDCFE66
1755C2258589E786562A219CFC31AF35BBE17BD7BAC729CA784A167B7281786E
75E83BC7D105FED0A92EE09D08AF8C4A125DF8A190A33EBC11ACD5F6A3F8198D
E306676211A1163E190018B164D3A9C2B085ED150CD488872EA2CA520F7D326D
2D1E8CEC383EE8731CEEF8D810B865F57A7C72EFD7E7A86AEDF37AC9486E50E7
180C782C06EAF46BB07516F3C3B7CE6E44BDC80E1FA3B1BF219BC2DE8C7E9C4A
39B13878C5D27598F415B911C024272C428B2781DF32C123B0EB03B9B96F869F
B2E620B8A6AA9678F2E08A420D317F30F9DC1CE66BC650242F250BE3447DE4F6
49D186D53DE3789E696241FDDB9C731523BC5329EA8AC7140D24B87D5AE89712
AC0FB1E57A37876138DF546645CBC1834AF2BB2C887681DBC0104C6856F1682E
329787AC43F30653D8B9D2086A90EEFAEAA4F656E9D3692E6306D0B6D6A3EFE7
0C775A08AB762A9F42B915611DA9F229590D0A9515AD2103933EBB1AD466ED9C
CD7900120841C8A4EDA5623B07989C1701F9FA60B278FC800CB91D5744495443
E6A9A2EB98DB1790E102EED5B260BAD13CE81268B0166973678634CA5B2EEC84
B6F8018BB45C132DED2C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (imex2.dvi)
@start /Fa 205[49 49 49[{}2 99.6264 /CMR12 rf /Fb 130[51
1[51 51 2[51 51 51 51 51 51 1[51 51 51 1[51 51 1[51 1[51
2[51 51 51 51 4[51 39[51 51 51 51 51 3[51 2[51 51 40[{}29
99.6264 /CMTT12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 630 557 a Fb(\\psv)368 b(\\psa)g(\\psr)342
b(\\psnr)h(\\psl)732 830 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 12.80363 .5
CLW mul sub 0 360 arc closepath gsave 1. setgray fill grestore gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 732
830 a
 tx@Dict begin { -7.11317 0.0 } PutCoor PutBegin  end
 732 830 a 732 830 a
 tx@Dict begin 90.  RotBegin  end
 732 830 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 4.26773 0.0 -4.26773 0.0  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial 732 830 a
 tx@Dict begin RotEnd  end
 732 830 a 732 830 a
 tx@Dict begin PutEnd  end
 732 830 a
732 830 a
 tx@Dict begin { 5.69046 0.0 } PutCoor PutBegin  end
 732 830 a 732 830 a
 tx@Dict begin 90.  RotBegin  end
 732 830 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 0.0 4.26773 0.0 -4.26773  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 4.26773 0.0 -4.26773 0.0  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
732 830 a
 tx@Dict begin RotEnd  end
 732 830 a 732 830 a
 tx@Dict begin PutEnd  end
 732 830 a 572 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 12.80363 .5
CLW mul sub 0 360 arc closepath gsave 1. setgray fill grestore gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { BeginArrow
2.  2.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow  moveto } def /ArrowB
{ } def [ 8.5359 0.0 -8.5359 0.0  /Lineto /lineto load def false Line
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 572 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 14.22636 SLW 1. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 15.93352 0.0 -15.93352 0.0  /Lineto /lineto
load def false Line  gsave 14.22636 SLW 1. setgray 0 setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 15.93352 0.0 13.65749 0.0 11.38113 -5.33488 6.82874
5.33488 2.27635 -5.33488 -2.27635 5.33488 -6.82874 -5.33488 -11.38113
5.33488 -13.65749 0.0 -15.93352 0.0  /Lineto /lineto load def false
Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 572 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.42677 SLW 0. setgray  0. true -17.0717
-8.53569 17.0717 8.53569 .5 Frame  gsave 1. setgray fill grestore gsave
0.42677 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 2.84544 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 15.93352 8.53569 15.93352 -8.53569  /Lineto
/lineto load def false Line  gsave 2.84544 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2448 830 a
 tx@Dict begin { -1.13817 0.0 } PutCoor PutBegin  end
 2448
830 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 15.93352 0.0 13.65749 0.0 11.38113 -5.33488 6.82874
5.33488 2.27635 -5.33488 -2.27635 5.33488 -6.82874 -5.33488 -11.38113
5.33488 -13.65749 0.0 -15.93352 0.0  /Lineto /lineto load def false
Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 2448 830
a
 tx@Dict begin PutEnd  end
 2448 830 a 572 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 14.22636 SLW 1. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 19.91682 0.0 -19.91682 0.0  /Lineto /lineto
load def false Line  gsave 14.22636 SLW 1. setgray 0 setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ -17.07181 0.0 -19.91682 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 17.07181 0.0 14.22636 7.11317 8.5359 0.0 10.66977
-7.11317 12.80363 0.0 7.11317 7.11317 1.42271 0.0 3.55658 -7.11317
5.69046 0.0 0.0 7.11317 -5.69046 0.0 -3.55658 -7.11317 -1.42271 0.0
-7.11317 7.11317 -12.80363 0.0 -10.66977 -7.11317 -8.5359 0.0 -14.22636
7.11317 -17.07181 0.0  1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 19.91682 0.0 17.07181 0.0  /Lineto /lineto load def
false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 630 1307 a Fb(\\psc)316
b(\\psinv)215 b(\\pstl{2})241 b(\\pstt)292 b(\\psatt)732
1579 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 6.47366 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 0.0 -11.38092 0.0 11.38092  /Lineto /lineto
load def false Line  gsave 6.47366 SLW 0. setgray 0 setlinecap stroke
 grestore gsave 2.48987 SLW 1. setgray stroke grestore gsave grestore
end
 
@endspecial 572 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ -14.22636 -14.22636
-14.22636 14.22636 14.22636 0.0  /Lineto /lineto load def false Polygon
 gsave 1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  17.07181 0.0 2.84544
.5 CLW mul sub 0 360 arc closepath gsave 1. setgray fill grestore gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 572 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -28.45274 -2.84544
28.45274 2.84544 .5 Frame  gsave 0.75 setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 572
w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -17.07181 -5.69046
17.07181 5.69046 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 572 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -17.07181 -5.69046
17.07181 5.69046 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 2.84544 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 15.6491 -5.69046 15.6491 5.69046  /Lineto /lineto
load def false Line  gsave 2.84544 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 604 2056 a(\\pscv)317 b(\\psci)g(\\psid)343
b(\\psd)f(\\psba)732 2328 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end


@endspecial 732 2328 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 732 2328 a 732 2328 a
 tx@Dict begin 45.  RotBegin  end
 732 2328
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -11.38092 -11.38092
11.38092 11.38092 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 732 2328 a
 tx@Dict begin RotEnd  end
 732
2328 a 732 2328 a
 tx@Dict begin PutEnd  end
 732 2328 a 732 2328 a
 tx@Dict begin { -7.11317 0.0 } PutCoor PutBegin  end
 732 2328 a 732
2328 a
 tx@Dict begin 90.  RotBegin  end
 732 2328 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 4.26773 0.0 -4.26773 0.0  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
732 2328 a
 tx@Dict begin RotEnd  end
 732 2328 a 732 2328 a
 tx@Dict begin PutEnd  end
 732 2328 a 732 2328
a
 tx@Dict begin { 5.69046 0.0 } PutCoor PutBegin  end
 732 2328 a 732 2328 a
 tx@Dict begin 90.  RotBegin  end
 732 2328 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 0.0 4.26773 0.0 -4.26773  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 4.26773 0.0 -4.26773 0.0  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 732
2328 a
 tx@Dict begin RotEnd  end
 732 2328 a 732 2328 a
 tx@Dict begin PutEnd  end
 732 2328 a 572 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial 1304 2328 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 1304 2328 a 1304
2328 a
 tx@Dict begin 45.  RotBegin  end
 1304 2328 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -11.38092 -11.38092
11.38092 11.38092 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
1304 2328 a
 tx@Dict begin RotEnd  end
 1304 2328 a 1304 2328 a
 tx@Dict begin PutEnd  end
 1304 2328 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { BeginArrow 2.  2.  scale false 0.4 1.4 1.5 2. Arrow  EndArrow
 } def [ 8.5359 0.0 -8.5359 0.0  /Lineto /lineto load def false Line
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 572 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 15.93352 SLW 1. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 5.9751 0.0 -5.9751 0.0  /Lineto /lineto load
def false Line  gsave 15.93352 SLW 1. setgray 0 setlinecap stroke 
grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 5.9751 -7.9666 5.9751
7.9666 -3.98329 0.0  /Lineto /lineto load def false Polygon  gsave
0. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 1.99179 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ -4.9792 7.9666 -4.9792 -7.9666  /Lineto /lineto
load def false Line  gsave 1.99179 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial
572 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 11.95009 .5
CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 15.93352 SLW 1. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 5.9751 0.0 -5.9751 0.0  /Lineto /lineto load
def false Line  gsave 15.93352 SLW 1. setgray 0 setlinecap stroke 
grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ 5.9751 -7.9666 5.9751
7.9666 -3.98329 0.0  /Lineto /lineto load def false Polygon  gsave
0. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.99179 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ -4.9792 7.9666 -4.9792 -7.9666  /Lineto /lineto
load def false Line  gsave 1.99179 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 572 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end


@endspecial 3020 2328 a
 tx@Dict begin { -4.26773 0.0 } PutCoor PutBegin  end
 3020 2328 a @beginspecial @setspecial
 tx@Dict begin STP newpath 2.27626 SLW 1. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 0.0 5.69046 0.0 -5.69046  /Lineto /lineto load
def false Line  gsave 2.27626 SLW 1. setgray 0 setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 1.70709 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ -1.9919 2.84544 -1.9919 -2.84544  /Lineto /lineto
load def false Line  gsave 1.70709 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.70709 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 1.9919 11.38092 1.9919 -11.38092  /Lineto /lineto
load def false Line  gsave 1.70709 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 3020 2328 a
 tx@Dict begin PutEnd  end
 3020 2328 a 3020
2328 a
 tx@Dict begin { 4.26773 0.0 } PutCoor PutBegin  end
 3020 2328 a @beginspecial @setspecial
 tx@Dict begin STP newpath 2.27626 SLW 1. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 0.0 5.69046 0.0 -5.69046  /Lineto /lineto load
def false Line  gsave 2.27626 SLW 1. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 1.70709 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ -1.9919 2.84544 -1.9919 -2.84544  /Lineto /lineto
load def false Line  gsave 1.70709 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 1.70709 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 1.9919 11.38092 1.9919 -11.38092  /Lineto /lineto
load def false Line  gsave 1.70709 SLW 0. setgray 0 setlinecap stroke
 grestore end
 
@endspecial 3020 2328 a
 tx@Dict begin PutEnd  end
 3020 2328 a 578
2805 a Fb(\\psnul)266 b(\\psnor)732 3078 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 11.95009 .5
CLW mul sub 0 360 arc closepath gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /DS 4.26773 0. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto (b) show } bind def 0.0 0.0 Dot end
 
@endspecial 572 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -28.45274 28.45274 28.45274 -28.45274 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0.0 0.0 11.95009 .5
CLW mul sub 0 360 arc closepath gsave 0.75 setgray fill grestore gsave
0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial
1852 5637 a Fa(1)p eop end
%%Page: 2 2
TeXDict begin 2 1 bop 307 557 a Fb(\\psccoa{0}\(0,0\){a1}{3})106
b(\\pscwoa{0}\(0,0\){a1}{3})f(\\pstp{0}\(0,0\){z1}{4}{2})871
1302 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-56.90549 -28.45274 56.90549 28.45274 -56.90549 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial 871 1302
a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 871 1302 a 871 1302 a
 tx@Dict begin tx@NodeDict begin {-42.67911 14.22636 } false /N@a1m
10 {InitPnode } NewNode end end
 871 1302 a 871 1302 a
 tx@Dict begin tx@NodeDict begin {-42.67911 -14.22636 } false /N@a1p
10 {InitPnode } NewNode end end
 871 1302
a 871 1302 a
 tx@Dict begin tx@NodeDict begin {42.67911 0.0 } false /N@a1o 10 {InitPnode
} NewNode end end
 871 1302 a 871 1302 a
 tx@Dict begin tx@NodeDict begin {0.0 -28.45274 } false /N@a1g 10 {InitPnode
} NewNode end end
 871 1302 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 0.0 14.22636 tx@NodeDict begin tx@NodeDict /N@a1m
known { /N@a1m load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 0.0 -14.22636 tx@NodeDict begin tx@NodeDict /N@a1p
known { /N@a1p load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@a1o known { /N@a1o
load GetCenter } { 0 0 } ifelse end 0.0 0.0  /Lineto /lineto load def
false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@a1g known { /N@a1g
load GetCenter } { 0 0 } ifelse end 0.0 0.0  /Lineto /lineto load def
false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ -28.45274 -28.45274
-28.45274 28.45274 28.45274 0.0  /Lineto /lineto load def false Polygon
 gsave 1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
871 1302 a
 tx@Dict begin { -19.91682 -14.22636 } PutCoor PutBegin  end
 871 1302 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 0.0 4.26773 0.0 -4.26773  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 4.26773 0.0 -4.26773 0.0  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 871 1302 a
 tx@Dict begin PutEnd  end
 871
1302 a 871 1302 a
 tx@Dict begin { -19.91682 14.22636 } PutCoor PutBegin  end
 871 1302 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 4.26773 0.0 -4.26773 0.0  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end


@endspecial 871 1302 a
 tx@Dict begin PutEnd  end
 871 1302 a 871 1302 a
 tx@Dict begin PutEnd  end
 871 1302
a 1228 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-56.90549 -28.45274 56.90549 28.45274 -56.90549 -28.45274 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial 2099
1302 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 2099 1302 a 2099 1302 a
 tx@Dict begin tx@NodeDict begin {-42.67911 14.22636 } false /N@a1p
10 {InitPnode } NewNode end end
 2099 1302 a 2099 1302
a
 tx@Dict begin tx@NodeDict begin {-42.67911 -14.22636 } false /N@a1m
10 {InitPnode } NewNode end end
 2099 1302 a 2099 1302 a
 tx@Dict begin tx@NodeDict begin {42.67911 0.0 } false /N@a1o 10 {InitPnode
} NewNode end end
 2099 1302 a 2099 1302 a
 tx@Dict begin tx@NodeDict begin {0.0 -28.45274 } false /N@a1g 10 {InitPnode
} NewNode end end
 2099
1302 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 0.0 -14.22636 tx@NodeDict begin tx@NodeDict /N@a1m
known { /N@a1m load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 0.0 14.22636 tx@NodeDict begin tx@NodeDict /N@a1p
known { /N@a1p load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@a1o known { /N@a1o
load GetCenter } { 0 0 } ifelse end 0.0 0.0  /Lineto /lineto load def
false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@a1g known { /N@a1g
load GetCenter } { 0 0 } ifelse end 0.0 0.0  /Lineto /lineto load def
false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  [ -28.45274 -28.45274
-28.45274 28.45274 28.45274 0.0  /Lineto /lineto load def false Polygon
 gsave 1. setgray fill grestore gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial 2099 1302 a
 tx@Dict begin { -19.91682 -14.22636 } PutCoor PutBegin  end
 2099 1302 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 4.26773 0.0 -4.26773 0.0  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 2099 1302 a
 tx@Dict begin PutEnd  end
 2099 1302 a 2099
1302 a
 tx@Dict begin { -19.91682 14.22636 } PutCoor PutBegin  end
 2099 1302 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 0.0 4.26773 0.0 -4.26773  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.85355 SLW 0. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 4.26773 0.0 -4.26773 0.0  /Lineto /lineto load
def false Line  gsave 0.85355 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 2099 1302 a
 tx@Dict begin PutEnd  end
 2099
1302 a 2099 1302 a
 tx@Dict begin PutEnd  end
 2099 1302 a 3352 1066 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-56.90549 -56.90549 56.90549 56.90549 -56.90549 -56.90549 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial 3352 1066 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 3352 1066 a 3352
1066 a
 tx@Dict begin tx@NodeDict begin {-56.90549 28.45274 } false /N@z111
10 {InitPnode } NewNode end end
 3352 1066 a 3352 1066 a
 tx@Dict begin tx@NodeDict begin {-56.90549 -28.45274 } false /N@z112
10 {InitPnode } NewNode end end
 3352 1066 a 3352 1066
a
 tx@Dict begin tx@NodeDict begin {56.90549 28.45274 } false /N@z121
10 {InitPnode } NewNode end end
 3352 1066 a 3352 1066 a
 tx@Dict begin tx@NodeDict begin {56.90549 -28.45274 } false /N@z122
10 {InitPnode } NewNode end end
 3352 1066 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@z121 known { /N@z121
load GetCenter } { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@z111
known { /N@z111 load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end


@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@z122 known { /N@z122
load GetCenter } { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@z112
known { /N@z112 load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  0. true -31.29819 -39.83366
31.29819 39.83366 .5 Frame  gsave 1. setgray fill grestore gsave 0.8
SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial 3352 1066 a
 tx@Dict begin PutEnd  end
 3352 1066 a 358
1779 a Fb(\\psit{0}\(0,0\){k1}{3})208 b(\\psig{0}\(0,0\){g1}{3})233
b(\\psll{0}\(0,0\){g1}{3})871 2288 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -56.90549 28.45274 56.90549 -28.45274 -56.90549 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end


@endspecial 871 2288 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 871 2288 a 871 2288 a
 tx@Dict begin tx@NodeDict begin {-7.11317 42.67911 } false /N@k111
10 {InitPnode } NewNode end end
 871 2288
a 871 2288 a
 tx@Dict begin tx@NodeDict begin {-7.11317 -42.67911 } false /N@k112
10 {InitPnode } NewNode end end
 871 2288 a 871 2288 a
 tx@Dict begin tx@NodeDict begin {7.11317 42.67911 } false /N@k121
10 {InitPnode } NewNode end end
 871 2288 a 871 2288
a
 tx@Dict begin tx@NodeDict begin {7.11317 -42.67911 } false /N@k122
10 {InitPnode } NewNode end end
 871 2288 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@k112 known { /N@k112
load GetCenter } { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@k111
known { /N@k111 load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@k122 known { /N@k122
load GetCenter } { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@k121
known { /N@k121 load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 19.91682 SLW 1. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 0.0 -14.22636 0.0 14.22636  /Lineto /lineto
load def false Line  gsave 19.91682 SLW 1. setgray 0 setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def -7.11317 0.0 /y ED /x ED /r 14.22636 def /c 57.2957
r Div def /angleA -90. 0.0 c mul 2 div add def /angleB 90. 0.0 c mul
2 div sub def x y r angleA angleB arc  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def 7.11317 0.0 /y ED /x ED /r 14.22636 def /c 57.2957
r Div def /angleA 90. 0.0 c mul 2 div add def /angleB -90. 0.0 c mul
2 div sub def x y r angleA angleB arc  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /DS 4.26773 0. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto (b) show } bind def -11.38092 34.1434 Dot end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /DS 4.26773 0. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto (b) show } bind def 11.38092 34.1434 Dot end
 
@endspecial 871 2288 a
 tx@Dict begin PutEnd  end
 871
2288 a 1228 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -56.90549 28.45274 56.90549 -28.45274 -56.90549 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial
2099 2288 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 2099 2288 a 2099 2288 a
 tx@Dict begin tx@NodeDict begin {-14.22636 42.67911 } false /N@g111
10 {InitPnode } NewNode end end
 2099 2288 a 2099
2288 a
 tx@Dict begin tx@NodeDict begin {-14.22636 -42.67911 } false /N@g112
10 {InitPnode } NewNode end end
 2099 2288 a 2099 2288 a
 tx@Dict begin tx@NodeDict begin {14.22636 42.67911 } false /N@g121
10 {InitPnode } NewNode end end
 2099 2288 a 2099 2288
a
 tx@Dict begin tx@NodeDict begin {14.22636 -42.67911 } false /N@g122
10 {InitPnode } NewNode end end
 2099 2288 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@g112 known { /N@g112
load GetCenter } { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@g111
known { /N@g111 load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@g122 known { /N@g122
load GetCenter } { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@g121
known { /N@g121 load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def -14.22636 0.0 /y ED /x ED /r 14.22636 def /c 57.2957
r Div def /angleA -90. 0.0 c mul 2 div add def /angleB 90. 0.0 c mul
2 div sub def x y r angleA angleB arc  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def 14.22636 0.0 /y ED /x ED /r 14.22636 def /c 57.2957
r Div def /angleA 90. 0.0 c mul 2 div add def /angleB -90. 0.0 c mul
2 div sub def x y r angleA angleB arc  gsave 0.8 SLW 0. setgray 0 setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /DS 4.26773 0. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto (b) show } bind def -18.4941 34.1434 Dot end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /DS 4.26773 0. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto (b) show } bind def 18.4941 34.1434 Dot end
 
@endspecial 2099 2288 a
 tx@Dict begin PutEnd  end
 2099 2288 a 1253
w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  gsave 0.8 SLW 0. setgray
-28.45274 -56.90549 28.45274 56.90549 -28.45274 -56.90549 28.45274
28.45274 1 10 { 0. setgray } 6.0 Grid grestore end
 
@endspecial 3352 2288 a
 tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end

3352 2288 a 3352 2288 a
 tx@Dict begin tx@NodeDict begin {-8.5359 42.67911 } false /N@t111
10 {InitPnode } NewNode end end
 3352 2288 a 3352 2288 a
 tx@Dict begin tx@NodeDict begin {-8.5359 -42.67911 } false /N@t112
10 {InitPnode } NewNode end end
 3352
2288 a 3352 2288 a
 tx@Dict begin tx@NodeDict begin {8.5359 42.67911 } false /N@t121 10
{InitPnode } NewNode end end
 3352 2288 a 3352 2288 a
 tx@Dict begin tx@NodeDict begin {8.5359 -42.67911 } false /N@t122
10 {InitPnode } NewNode end end
 3352 2288
a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@t112 known { /N@t112
load GetCenter } { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@t111
known { /N@t111 load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ tx@NodeDict begin tx@NodeDict /N@t122 known { /N@t122
load GetCenter } { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@t121
known { /N@t121 load GetCenter } { 0 0 } ifelse end  /Lineto /lineto
load def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke 
grestore end
 
@endspecial 3352 2288 a
 tx@Dict begin { -8.5359 0.0 } PutCoor PutBegin  end
 3352 2288 a 3352
2288 a
 tx@Dict begin 90.  RotBegin  end
 3352 2288 a @beginspecial @setspecial
 tx@Dict begin STP newpath 14.22636 SLW 1. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 19.91682 0.0 -19.91682 0.0  /Lineto /lineto
load def false Line  gsave 14.22636 SLW 1. setgray 0 setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ -17.07181 0.0 -19.91682 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 17.07181 0.0 14.22636 7.11317 8.5359 0.0 10.66977
-7.11317 12.80363 0.0 7.11317 7.11317 1.42271 0.0 3.55658 -7.11317
5.69046 0.0 0.0 7.11317 -5.69046 0.0 -3.55658 -7.11317 -1.42271 0.0
-7.11317 7.11317 -12.80363 0.0 -10.66977 -7.11317 -8.5359 0.0 -14.22636
7.11317 -17.07181 0.0  1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 19.91682 0.0 17.07181 0.0  /Lineto /lineto load def
false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
3352 2288 a
 tx@Dict begin RotEnd  end
 3352 2288 a 3352 2288 a
 tx@Dict begin PutEnd  end
 3352 2288 a 3352
2288 a
 tx@Dict begin { 8.5359 0.0 } PutCoor PutBegin  end
 3352 2288 a 3352 2288 a
 tx@Dict begin -90.  RotBegin  end
 3352 2288 a @beginspecial
@setspecial
 tx@Dict begin STP newpath 14.22636 SLW 1. setgray  /ArrowA { moveto
} def /ArrowB { } def [ 19.91682 0.0 -19.91682 0.0  /Lineto /lineto
load def false Line  gsave 14.22636 SLW 1. setgray 0 setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ -17.07181 0.0 -19.91682 0.0  /Lineto /lineto load
def false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 17.07181 0.0 14.22636 7.11317 8.5359 0.0 10.66977
-7.11317 12.80363 0.0 7.11317 7.11317 1.42271 0.0 3.55658 -7.11317
5.69046 0.0 0.0 7.11317 -5.69046 0.0 -3.55658 -7.11317 -1.42271 0.0
-7.11317 7.11317 -12.80363 0.0 -10.66977 -7.11317 -8.5359 0.0 -14.22636
7.11317 -17.07181 0.0  1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /ArrowA { moveto } def
/ArrowB { } def [ 19.91682 0.0 17.07181 0.0  /Lineto /lineto load def
false Line  gsave 0.8 SLW 0. setgray 0 setlinecap stroke  grestore
end
 
@endspecial 3352 2288 a
 tx@Dict begin RotEnd  end
 3352 2288 a 3352
2288 a
 tx@Dict begin PutEnd  end
 3352 2288 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /DS 4.26773 0. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto (b) show } bind def -12.80363 34.1434 Dot end
 
@endspecial
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0. setgray  /DS 4.26773 0. CLW mul
add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot
/Dot { moveto (b) show } bind def 12.80363 34.1434 Dot end
 
@endspecial 3352 2288 a
 tx@Dict begin PutEnd  end
 3352
2288 a 1852 5637 a Fa(2)p eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
